#!/usr/bin/ash

. /etc/init_head

udevd_running=0
mount_handler=default_mount_handler

if [ -x /usr/bin/systemd-timestamp ]; then
    RD_TIMESTAMP=$(systemd-timestamp)
fi

. /init_functions

mount -t proc proc /proc -o nosuid,noexec,nodev
mount -t sysfs sys /sys -o nosuid,noexec,nodev
mount -t devtmpfs dev /dev -o mode=0755,nosuid
mount -t tmpfs run /run -o nosuid,nodev,mode=0755
mkdir -m755 /run/initramfs

parse_cmdline

for d in ${disablehooks//,/ }; do
    [ -e "/hooks/$d" ] && chmod 644 "/hooks/$d"
done


run_hookfunctions 'run_earlyhook' 'early hook' $EARLYHOOKS

if [ -n "$earlymodules$MODULES" ]; then
    modprobe -qab ${earlymodules//,/ } $MODULES
fi

run_hookfunctions 'run_hook' 'hook' $HOOKS

if [ ! -f '/etc/unbreakable' ]; then
    if [ "${break}" = "premount" ] || [ "${break}" = "y" ]; then
	echo -e "\\e[01;34m::\\e[00m Premount break requested, type 'exit' to resume."
	launch_interactive_shell
    fi
fi

_root=$(resolve_device "$root") && root=$_root
unset _root
fsck_root
"$mount_handler" /new_root

run_hookfunctions 'run_latehook' 'late hook' $LATEHOOKS
run_hookfunctions 'run_cleanuphook' 'cleanup hook' $CLEANUPHOOKS

if [ "$(stat -c %D /)" = "$(stat -c %D /new_root)" ]; then
    echo -e "\\e[01;31mFailed to mount the real root device."
    echo -e "Bailing out, you are on your own. Good luck.\\e[00m"
    launch_interactive_shell --exec
elif [ ! -x "/new_root/sbin/init" ]; then
    echo -e "\\e[01;31mRoot device mounted successfully, but /sbin/init does not exist."
    echo -e "Bailing out, you are on your own. Good luck.\\e[00m"
    launch_interactive_shell --exec
fi

if [ ! -f '/etc/unbreakable' ]; then
    if [ "${break}" = "postmount" ]; then
	echo -e "\\e[01;34m::\\e[00m Postmount break requested, type 'exit' to resume."
	launch_interactive_shell
    fi
fi

exec env -i "TERM=$TERM" "RD_TIMESTAMP=$RD_TIMESTAMP" \
    /usr/bin/switch_root /new_root /sbin/init "$@"

